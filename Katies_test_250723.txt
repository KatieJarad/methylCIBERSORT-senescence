data <- read.table(file = "/home/katiej/methylcibersort_test/rstudio-export-2/OPT2_0.2_200_Signature.txt")

# this is the signature file
sig.yg.opt2.b.sig <- read.delim("/home/katiej/methylcibersort_test/rstudio-export-2/OPT2_0.2_200_Signature.txt", row.names = 1, header = TRUE)

# this is the mixture file
mix.pan.opt2.b.sig <- read.table("/home/katiej/methylcibersort_test/rstudio-export-2/pan_brain_mixture.opt2.b.sig.txt", row.names = 1, header = TRUE)

# this is the phenotype data for each of the samples
pan.pheno <- read.delim("/home/katiej/methylcibersort_test/pan_brain_phenoData_Coded_NAs_ordered.txt", row.names = 1, header = TRUE)

### create a family column within pan.pheno
library(dplyr)

names(table(pan.pheno$Reference.Group.abbreviation))


pan.pheno$tumour_family <- recode(pan.pheno$Reference.Group.abbreviation, 
                                  "A_IDH"  = "Glioma-IDH","A_IDH_HG" = "Glioma-IDH", "O_IDH" = "Glioma-IDH",
                                  "CONTR_ADENOPIT" = "Control",  "CONTR_CEBM" = "Control", "CONTR_HEMI" = "Control", "CONTR_HYPTHAL" = "Control", "CONTR_INFLAM" = "Control", 
                                  "CONTR_PINEAL" = "Control", "CONTR_PONS" = "Control", "CONTR_REACT" = "Control", "CONTR_WM" = "Control", "LYMPHO" = "Control",
                                  "PLEX_AD" = "Plexus", "PLEX_PED_A" = "Plexus", "PLEX_PED_B" = "Plexus",
                                  "PIN_T_PB_A" = "Pineal", "PIN_T_PB_B" = "Pineal", "PIN_T_PPT" = "Pineal", "PTPR_A" = "Pineal", "PTPR_B" = "Pineal",
                                  "SCHW" = "Nerve", "SCHW_MEL" = "Nerve",
                                  "CHORDM" = "Mesenchymal", "EFT_CIC" = "Mesenchymal", "EWS" = "Mesenchymal", "HMB" = "Mesenchymal", "MNG" = "Mesenchymal", "SFT_HMPC" = "Mesenchymal",
                                  "MELAN" = "Melanocytic", "MELCYT" = "Melanocytic",
                                  "CN" = "Glio-neuronal", "DLGNT"= "Glio-neuronal", "ENB_A" = "Glio-neuronal", "ENB_B" = "Glio-neuronal", "LGG_DIG_DIA" = "Glio-neuronal", 
                                  "LGG_DNT" = "Glio-neuronal", "LGG_GG" = "Glio-neuronal", "LGG_RGNT" = "Glio-neuronal", "LIPN" = "Glio-neuronal", 
                                  "PGG_nC" = "Glio-neuronal", "RETB" = "Glio-neuronal",
                                  "ANA_PA" = "Glioma-other",  "CHGL" = "Glioma-other", "HGNET_MN1" = "Glioma-other", "IHG" = "Glioma-other", "LGG_MYB" = "Glioma-other",
                                  "LGG_PA_GG_ST" = "Glioma-other", "LGG_PA_MID" = "Glioma-other", "LGG_PA_PF" = "Glioma-other", "LGG_SEGA" = "Glioma-other", "PXA" = "Glioma-other",
                                  "DMG_K27" = "Glioblastoma", "GBM_G34" = "Glioblastoma", "GBM_MES" = "Glioblastoma", "GBM_MID"= "Glioblastoma", "GBM_MYCN"= "Glioblastoma",
                                  "GBM_RTK_I" = "Glioblastoma", "GBM_RTK_II" = "Glioblastoma", "GBM_RTK_III" = "Glioblastoma",
                                  "EPN_MPE" = "Ependymal", "EPN_PF_A" = "Ependymal", "EPN_PF_B" = "Ependymal", "EPN_RELA" = "Ependymal", "EPN_SPINE" = "Ependymal", 
                                  "EPN_YAP" = "Ependymal", "SUBEPN_PF" = "Ependymal", "SUBEPN_SPINE" = "Ependymal", "SUBEPN_ST" = "Ependymal",
                                  "CPH_ADM" = "Sella", "CPH_PAP" = "Sella", "PITAD_ACTH" = "Sella", "PITAD_FSH_LH" = "Sella", "PITAD_PRL" = "Sella", 
                                  "PITAD_STH_DNS_A" = "Sella", "PITAD_STH_DNS_B" = "Sella", "PITAD_STH_SPA" = "Sella", "PITAD_TSH" = "Sella", "PITUI" = "Sella",
                                  "ATRT_MYC" = "Embryonal", "ATRT_SHH" = "Embryonal", "ATRT_TYR" = "Embryonal", "CNS_NB_FOXR2" = "Embryonal", "ETMR" = "Embryonal", 
                                  "HGNET_BCOR" = "Embryonal", "MB_G3" = "Embryonal", "MB_G4" = "Embryonal", "MB_SHH_CHL_AD" = "Embryonal", 
                                  "MB_SHH_INF" = "Embryonal", "MB_WNT" = "Embryonal")
library(writexl)
write_xlsx(pan.pheno)
write_xlsx(combined.df, "/home/katiej2/methylcibersort_test/combined.df.xlsx") 
write_xlsx(combined.df.subset, "/home/katiej/methylcibersort_test/combined.df.subset.xlsx")
write_xlsx(combined.df.age.subset, "/home/katiej/methylcibersort_test/combined.df.age.subset.xlsx")


pan.pheno$tumour_family_order <- recode(pan.pheno$tumour_family, 
                                        "Sella" = 1, 
                                        "Plexus" = 2,
                                        "Pineal" = 3,
                                        "Nerve" = 4,
                                        "Mesenchymal" = 5,
                                        "Melanocytic" = 6,
                                        "Glio-neuronal" = 7,
                                        "Glioma-other" = 8,
                                        "Glioma-IDH" = 9,
                                        "Glioblastoma" = 10,
                                        "Ependymal" = 11,
                                        "Embryonal" = 12,
                                        "Control" = 13)




########### only run this once unless you update something
#a <- Sys.time()
#source("./CIBERSORT.R") 
#results <- CIBERSORT(sig_matrix = "/home/katiej/methylcibersort_test/rstudio-export-2/OPT2_0.2_200_Signature.txt",
#                       mixture_file = "/home/katiej/methylcibersort_test/rstudio-export-2/pan_brain_mixture.opt2.b.sig.txt",
#                       perm = 1000,
#                       QN = FALSE,
#                       absolute = FALSE,
#                       abs_method = 'sig.score')
#b <- Sys.time()
#b-a
#saveRDS(results, "./results.rds")
#################

#results <- readRDS("./results.rds")

## check that results and pan.pheno are identical and in the same order
head(results)
dim(results)
head(pan.pheno)
dim(pan.pheno)

identical(rownames(pan.pheno),rownames(results))

pan.pheno$onc_senes <- results[,"Oncogene_Induced_Senescent"]

pan.pheno$near_senes <- results[,"Near_Senescent_BJ_fibroblast_cells"]

pan.pheno$senes <- results[,"Senescent_BJ_fibroblast_cells"]

######### no specific need to write out?
# PanPhenoResults$Oncogene_Induced_Senescent
# PanPhenoResults$Tumour_Type
# 
# library(writexl)
# write_xlsx(pan.pheno, "/home/katiej/methylcibersort_test/panpheno.xlsx")
# write.csv(results, "/home/katiej/methylcibersort_test/results.csv")
##################

### assuming that the table rows are aligned and identical we cna check specifically below
identical(row.names(pan.pheno), row.names(results))

# combined.df <- data.frame(Tumour_Type = pan.pheno$Tumour_Type, results)

combined.df <- data.frame(Tumour_Type = pan.pheno$Reference.Group.abbreviation,
                          family = pan.pheno$tumour_family,
                          family_order = pan.pheno$tumour_family_order,
                          age = pan.pheno$Age..years.at.operation.,
                          grade = pan.pheno$WHO.Grade,
                          sex = pan.pheno$Sex,
                          results)

#### specifically set the levels
combined.df$Tumour_Type <- factor(combined.df$Tumour_Type)
levels(combined.df$Tumour_Type)

# reorder is close to order, but is made to change the order of the factor levels.
combined.df %>%
  arrange(family_order) %>%    # First sort by val. This sort the dataframe but NOT the factor levels
  mutate(Tumour_Type=factor(Tumour_Type, levels=unique(Tumour_Type))) -> combined.df

# combined.df$Tumour_Type <- factor(combined.df$Tumour_Type, 
#                                   levels = c("SUBEPN", "AIDH","ANAPA",
#                                              "ATRT","CHGL","CHORDM", "CN",
#                                              "CNSNB",  "CONTR",  "CPH",   
# "DLGNT",  "DMG",    "EFT",    "ENB",    "EPN",    "ETMR",   "EWS",    "GBM",    "HGNET", 
# "HMB",    "IHG",    "LGG",    "LIPN",   "LYMPHO", "MB",     "MELAN",  "MELCYT", "MNG",   
# "OIDH",   "PGG",    "PINT",   "PITAD",  "PITUI",  "PLASMA", "PLEX",   "PTPR",   "PXA",   
# "RETB",   "SCHW",   "SFTHMPC"))

### remember scale_colour_manual to change the colours to the appropriate hexcode if you want 


library(dplyr)
library(ggplot2)

# It's recommended to use a named vector
cols <- c(
  "A_IDH"  = "Glioma-IDH",
  "A_IDH_HG" = "Glioma-IDH", 
  "O_IDH" = "Glioma-IDH",
  "CONTR_ADENOPIT" = "Control",  "CONTR_CEBM" = "Control", "CONTR_HEMI" = "Control", "CONTR_HYPTHAL" = "Control", "CONTR_INFLAM" = "Control", 
  "CONTR_PINEAL" = "Control", "CONTR_PONS" = "Control", "CONTR_REACT" = "Control", "CONTR_WM" = "Control", "LYMPHO" = "Control",
  "PLEX_AD" = "Plexus", "PLEX_PED_A" = "Plexus", "PLEX_PED_B" = "Plexus",
  "PIN_T_PB_A" = "Pineal", "PIN_T_PB_B" = "Pineal", "PIN_T_PPT" = "Pineal", "PTPR_A" = "Pineal", "PTPR_B" = "Pineal",
  "SCHW" = "Nerve", "SCHW_MEL" = "Nerve",
  "CHORDM" = "Mesenchymal", "EFT_CIC" = "Mesenchymal", "EWS" = "Mesenchymal", "HMB" = "Mesenchymal", "MNG" = "Mesenchymal", "SFT_HMPC" = "Mesenchymal",
  "MELAN" = "Melanocytic", "MELCYT" = "Melanocytic",
  "CN" = "Glio-neuronal", "DLGNT"= "Glio-neuronal", "ENB_A" = "Glio-neuronal", "ENB_B" = "Glio-neuronal", "LGG_DIG_DIA" = "Glio-neuronal", 
  "LGG_DNT" = "Glio-neuronal", "LGG_GG" = "Glio-neuronal", "LGG_RGNT" = "Glio-neuronal", "LIPN" = "Glio-neuronal", 
  "PGG_nC" = "Glio-neuronal", "RETB" = "Glio-neuronal",
  "ANA_PA" = "Glioma-other",  "CHGL" = "Glioma-other", "HGNET_MN1" = "Glioma-other", "IHG" = "Glioma-other", "LGG_MYB" = "Glioma-other",
  "LGG_PA_GG_ST" = "Glioma-other", "LGG_PA_MID" = "Glioma-other", "LGG_PA_PF" = "Glioma-other", "LGG_SEGA" = "Glioma-other", "PXA" = "Glioma-other",
  "DMG_K27" = "Glioblastoma", "GBM_G34" = "Glioblastoma", "GBM_MES" = "Glioblastoma", "GBM_MID"= "Glioblastoma", "GBM_MYCN"= "Glioblastoma",
  "GBM_RTK_I" = "Glioblastoma", "GBM_RTK_II" = "Glioblastoma", "GBM_RTK_III" = "Glioblastoma",
  "EPN_MPE" = "Ependymal", "EPN_PF_A" = "Ependymal", "EPN_PF_B" = "Ependymal", "EPN_RELA" = "Ependymal", "EPN_SPINE" = "Ependymal", 
  "EPN_YAP" = "Ependymal", "SUBEPN_PF" = "Ependymal", "SUBEPN_SPINE" = "Ependymal", "SUBEPN_ST" = "Ependymal",
  "CPH_ADM" = "Sella", "CPH_PAP" = "Sella", "PITAD_ACTH" = "Sella", "PITAD_FSH_LH" = "Sella", "PITAD_PRL" = "Sella", 
  "PITAD_STH_DNS_A" = "Sella", "PITAD_STH_DNS_B" = "Sella", "PITAD_STH_SPA" = "Sella", "PITAD_TSH" = "Sella", "PITUI" = "Sella",
  "ATRT_MYC" = "Embryonal", "ATRT_SHH" = "Embryonal", "ATRT_TYR" = "Embryonal", "CNS_NB_FOXR2" = "Embryonal", "ETMR" = "Embryonal", 
  "HGNET_BCOR" = "Embryonal", "MB_G3" = "Embryonal", "MB_G4" = "Embryonal", "MB_SHH_CHL_AD" = "Embryonal", 
  "MB_SHH_INF" = "Embryonal", "MB_WNT" = "Embryonal")

p + scale_colour_manual(values = cols)

cibersort_onc.plot <-ggplot(combined.df, aes(x=Tumour_Type, y=Oncogene_Induced_Senescent, fill=Tumour_Type)) +
  geom_boxplot(outlier.color="black", outlier.size=0.5, outlier.alpha = 0.75) +
  theme(legend.position = "none") + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  scale_fill_manual(values = cols)
print(cibersort_onc.plot)
ggsave(cibersort_onc.plot, file = "./cibersort_onc_plot.png", width =  20, height = 10, units = "cm")

### color by family
levels(factor(combined.df$family))
family.cols <- c("Sella" = "#5DB4A2",
                 "Plexus" = "#613B21",
                 "Pineal" = "#C3DCA5",
                 "Nerve" = "#E6CB9F",
                 "Mesenchymal" = "#BA88B1",
                 "Melanocytic" = "#183E59",
                 "Glio-neuronal" = "#99542B",
                 "Glioma-other" = "#615090",
                 "Glioma-IDH" = "#C7A533",
                 "Glioblastoma" = "#8DC582",
                 "Ependymal" = "#D14056",
                 "Embryonal" = "#4F97C6",
                 "Control" = "#BBBBB7")
levels(factor(Top_bottom_OIS$family))
family.cols <- c("Sella" = "#5DB4A2",
                 "Plexus" = "#613B21",
                 "Pineal" = "#C3DCA5",
                 "Nerve" = "#E6CB9F",
                 "Mesenchymal" = "#BA88B1",
                 "Melanocytic" = "#183E59",
                 "Glio-neuronal" = "#99542B",
                 "Glioma-other" = "#615090",
                 "Glioma-IDH" = "#C7A533",
                 "Glioblastoma" = "#8DC582",
                 "Ependymal" = "#D14056",
                 "Embryonal" = "#4F97C6",
                 "Control" = "#BBBBB7")
levels(factor(Top_bottom_senes$family))
family.cols <- c("Sella" = "#5DB4A2",
                 "Plexus" = "#613B21",
                 "Pineal" = "#C3DCA5",
                 "Nerve" = "#E6CB9F",
                 "Mesenchymal" = "#BA88B1",
                 "Melanocytic" = "#183E59",
                 "Glio-neuronal" = "#99542B",
                 "Glioma-other" = "#615090",
                 "Glioma-IDH" = "#C7A533",
                 "Glioblastoma" = "#8DC582",
                 "Ependymal" = "#D14056",
                 "Embryonal" = "#4F97C6",
                 "Control" = "#BBBBB7")
levels(factor(Top_bottom_near$family))
family.cols <- c("Sella" = "#5DB4A2",
                 "Plexus" = "#613B21",
                 "Pineal" = "#C3DCA5",
                 "Nerve" = "#E6CB9F",
                 "Mesenchymal" = "#BA88B1",
                 "Melanocytic" = "#183E59",
                 "Glio-neuronal" = "#99542B",
                 "Glioma-other" = "#615090",
                 "Glioma-IDH" = "#C7A533",
                 "Glioblastoma" = "#8DC582",
                 "Ependymal" = "#D14056",
                 "Embryonal" = "#4F97C6",
                 "Control" = "#BBBBB7")



##color by grade
show_colors(labels = TRUE)

levels(factor(combined.df.subset$grade))
grade.cols <- c("I" = "deepskyblue",
                "II" = "deepskyblue2",
                "III" = "deepskyblue3",
                "IV" = "deepskyblue4")

## colour by age
levels(factor(combined.df.age.test$age_group))
age.cols <- c("0-15" = "bisque2",
              "16-30" = "burlywood1",
              "31-45" = "burlywood2",
              "46-60" = "burlywood",
              "61-75" = "burlywood3",
              "76-93" = "burlywood4")

## Boxplots overall

cibersort_onc.plot <-ggplot(combined.df, aes(x=Tumour_Type, y=Oncogene_Induced_Senescent, fill=family)) +
  geom_boxplot(outlier.color="black", outlier.size=0.1, outlier.alpha = 0.75) +
  theme(legend.position = "right", legend.key.size = unit(0.25, 'cm'), legend.key.height = unit(0.25, 'cm'), legend.key.width = unit(0.25, 'cm'), legend.text = element_text((size=0.25))) + 
  labs(fill = "Tumour family") +
  theme(axis.text.x = element_text(size = 5, angle = 90, vjust = 1, hjust=1)) +
  scale_fill_manual(values = family.cols) +
  ggtitle("Levels of Oncogene Induced Senescence by Tumour Type") +
  theme(plot.title = element_text(size = 10, hjust = 0.5)) +
  xlab("Tumour Type") + ylab ("Oncogene-Induced Senescence") +
  theme(axis.title.x = element_text(size = 7)) +
  theme(axis.title.y = element_text(size = 7))
print(cibersort_onc.plot)
ggsave(cibersort_onc.plot, file = "./cibersort_onc_plot.png", width =  20, height = 10, units = "cm")

cibersort_fibro.plot <-ggplot(combined.df, aes(x=Tumour_Type, y=Senescent_BJ_fibroblast_cells, fill=family)) +
  geom_boxplot(outlier.color="black", outlier.size=0.1, outlier.alpha = 0.75) +
  theme(legend.position = "right", legend.key.size = unit(0.25, 'cm'), legend.key.height = unit(0.25, 'cm'), legend.key.width = unit(0.25, 'cm'), legend.text = element_text((size=0.25))) + 
  labs(fill = "Tumour family") +
  theme(axis.text.x = element_text(size = 5, angle = 90, vjust = 1, hjust=1)) +
  scale_fill_manual(values = family.cols) +
  ggtitle("Levels of Non-Oncogene Induced Senescence by Tumour Type") +
  theme(plot.title = element_text(size = 10, hjust = 0.5)) +
  xlab("Tumour Type") + ylab ("Senescenct BJ Fibroblast cells") +
  theme(axis.title.x = element_text(size = 7)) +
  theme(axis.title.y = element_text(size = 7))
print(cibersort_fibro.plot)
ggsave(cibersort_fibro.plot, file = "./cibersort_ses_fibro_plot.png", width =  20, height = 10, units = "cm")

cibersort_near.plot <-ggplot(combined.df, aes(x=Tumour_Type, y=Near_Senescent_BJ_fibroblast_cells, fill=family)) +
  geom_boxplot(outlier.color="black", outlier.size=0.1, outlier.alpha = 0.75) +
  theme(legend.position = "right", legend.key.size = unit(0.25, 'cm'), legend.key.height = unit(0.25, 'cm'), legend.key.width = unit(0.25, 'cm'), legend.text = element_text((size=0.25))) + 
  labs(fill = "Tumour family") +
  theme(axis.text.x = element_text(size = 5, angle = 90, vjust = 1, hjust=1)) +
  scale_fill_manual(values = family.cols) +
  ggtitle("Levels of Near-Senescence by Tumour Type") +
  theme(plot.title = element_text(size = 10, hjust = 0.5)) +
  xlab("Tumour Type") + ylab ("Nearly-Senescenct BJ Fibroblast cells") +
  theme(axis.title.x = element_text(size = 7)) +
  theme(axis.title.y = element_text(size = 7))
print(cibersort_near.plot)
ggsave(cibersort_near.plot, file = "./cibersort_near_plot.png", width =  20, height = 10, units = "cm")

table(combined.df$grade)

combined.df$grade <- recode(combined.df$grade,
       "I" = "I",
       "II" = "II",
       "III" = "III",
       "I, II or III"  = "NA",
       "II or III" = "NA",
       "not available" = "NA",
       "IV" = "IV")

combined.df$grade[combined.df$grade=="NA"] <- NA

combined.df[!is.na(combined.df$grade),] -> combined.df.subset

combined.df$age <- recode(combined.df$age, "not available" = "NA")
combined.df$age <-  trimws(combined.df$age)
combined.df$age[combined.df$age=="NA"] <- NA
combined.df[!is.na(combined.df$age),] -> combined.df.age.subset

combined.df[!is.na(combined.df$age),] -> combined.df.age.test

combined.df.age.test[combined.df.age.test$age <= 15, "age_group"] <- "0-15"
combined.df.age.test[combined.df.age.test$age > 15 & combined.df.age.test$age <= 31, "age_group"] <- "16-30"
combined.df.age.test[combined.df.age.test$age > 30 & combined.df.age.test$age <= 45, "age_group"] <- "31-45"
combined.df.age.test[combined.df.age.test$age > 45 & combined.df.age.test$age <= 60, "age_group"] <- "46-60"
combined.df.age.test[combined.df.age.test$age > 60 & combined.df.age.test$age <= 75, "age_group"] <- "61-75"
combined.df.age.test[combined.df.age.test$age > 75, "age_group"] <- "76-93"

combined.df$Tumour_location <- recode(combined.df$Tumour_location, "not available" = "NA")
combined.df$Tumour_location[combined.df$Tumour_location=="NA"] <- NA
combined.df[!is.na(combined.df$Tumour_location),] -> combined.df.location.subset

# boxplot to show senescence by grade

onc_senes_grade <- ggplot(combined.df.subset, aes(x=grade, y=Oncogene_Induced_Senescent, fill=grade)) +
  geom_boxplot(outlier.color="black", outlier.size=0.1, outlier.alpha = 0.75) +
  theme(legend.position = "none") +
  labs(fill = "WHO Grade") +
  theme(axis.text.x = element_text(size = 10, vjust = 1, hjust=1)) +
  scale_fill_manual(values = grade.cols) +
  ggtitle("Levels of Oncogene Induced Senescence by WHO Tumour Grade") +
  theme(plot.title = element_text(size = 10, hjust = 0.5)) +
  xlab("WHO Grade") + ylab ("Oncogene-Induced Senescence") +
  theme(axis.title.x = element_text(size = 10)) +
  theme(axis.title.y = element_text(size = 10))
print(onc_senes_grade)
ggsave(onc_senes_grade, file = "./onc_senes_grade.png", width =  20, height = 10, units = "cm")

near_senes_grade <- ggplot(combined.df.subset, aes(x=grade, y=Near_Senescent_BJ_fibroblast_cells, fill = grade)) +
  geom_boxplot(outlier.color="black", outlier.size=0.1, outlier.alpha = 0.75) +
  theme(legend.position = "none") +
  labs(fill = "WHO Grade") +
  theme(axis.text.x = element_text(size = 10, vjust = 1, hjust=1)) +
  scale_fill_manual(values = grade.cols) +
  ggtitle("Levels of Near-Senescence by WHO Tumour Grade") +
  theme(plot.title = element_text(size = 10, hjust = 0.5)) +
  xlab("WHO Grade") + ylab ("Near Senescence") +
  theme(axis.title.x = element_text(size = 10)) +
  theme(axis.title.y = element_text(size = 10))
print(near_senes_grade)
ggsave(near_senes_grade, file = "./near_senes_grade.png", width =  20, height = 10, units = "cm")

senes_grade <- ggplot(combined.df.subset, aes(x=grade, y=Senescent_BJ_fibroblast_cells, fill = grade, show.legend = FALSE)) +
  geom_boxplot(outlier.color="black", outlier.size=0.1, outlier.alpha = 0.75) +
  theme(legend.position = "none") +
  labs(fill = "WHO Grade") +
  theme(axis.text.x = element_text(size = 10, vjust = 1, hjust=1)) +
  scale_fill_manual(values = grade.cols) +
  ggtitle("Levels of Overall Senescence by WHO Tumour Grade") +
  theme(plot.title = element_text(size = 10, hjust = 0.5)) +
  xlab("WHO Grade") + ylab ("Senescence") +
  theme(axis.title.x = element_text(size = 10)) +
  theme(axis.title.y = element_text(size = 10))
print(senes_grade)
ggsave(senes_grade, file = "./senes_grade.png", width =  20, height = 10, units = "cm")

## Boxplots showing senescence by patient age

onc_senes_age <- ggplot(combined.df.age.test, aes(x=age_group, y=Oncogene_Induced_Senescent, fill = age_group)) +
  geom_boxplot(outlier.color="black", outlier.size=0.1, outlier.alpha = 0.75) +
  theme(legend.position = "none") + 
  labs(fill = "age_group") +
  theme(axis.text.x = element_text(size = 10, vjust = 1, hjust=1)) +
  scale_fill_manual(values = age.cols) +
  ggtitle("Levels of Oncogene Induced Senescence by Patient Age at Operation") +
  theme(plot.title = element_text(size = 10, hjust = 0.5)) +
  xlab("Patient Age at Operation") + ylab ("Oncogene-Induced Senescence") +
  theme(axis.title.x = element_text(size = 10)) +
  theme(axis.title.y = element_text(size = 10))
print(onc_senes_age)
ggsave(onc_senes_age, file = "./onc_senes_age.png", width =  20, height = 10, units = "cm")

near_senes_age <- ggplot(combined.df.age.test, aes(x=age_group, y=Near_Senescent_BJ_fibroblast_cells, fill = age_group)) +
  geom_boxplot(outlier.color="black", outlier.size=0.1, outlier.alpha = 0.75) +
  theme(legend.position = "none") + 
  labs(fill = "age group") +
  theme(axis.text.x = element_text(size = 10, vjust = 1, hjust=1)) +
  scale_fill_manual(values = age.cols) +
  ggtitle("Levels of Near-Senescence by Patient Age at Operation") +
  theme(plot.title = element_text(size = 10, hjust = 0.5)) +
  xlab("Patient Age at Operation") + ylab ("Near-Senescence") +
  theme(axis.title.x = element_text(size = 10)) +
  theme(axis.title.y = element_text(size = 10))
print(near_senes_age)
ggsave(near_senes_age, file = "./near_senes_age.png", width =  20, height = 10, units = "cm")

senes_age <- ggplot(combined.df.age.test, aes(x=age_group, y=Senescent_BJ_fibroblast_cells, fill = age_group)) +
  geom_boxplot(outlier.color="black", outlier.size=0.1, outlier.alpha = 0.75) +
  theme(legend.position = "none") + 
  labs(fill = "age group") +
  theme(axis.text.x = element_text(size = 10, vjust = 1, hjust=1)) +
  scale_fill_manual(values = age.cols) +
  ggtitle("Levels of Senescence by Patient Age at Operation") +
  theme(plot.title = element_text(size = 10, hjust = 0.5)) +
  xlab("Patient Age at Operation") + ylab ("Senescence") +
  theme(axis.title.x = element_text(size = 10)) +
  theme(axis.title.y = element_text(size = 10))
print(senes_age)
ggsave(senes_age, file = "./senes_age.png", width =  20, height = 10, units = "cm")


# Boxplots showing senescence by location (needs help!!!)

onc_senes_location <- ggplot(combined.df.location.subset, aes(x=Tumour_location, y=Oncogene_Induced_Senescent, fill=family)) +
  geom_boxplot(outlier.color="black", outlier.size=0.1, outlier.alpha = 0.75) +
  theme(legend.position = "right", legend.key.size = unit(0.25, 'cm'), legend.key.height = unit(0.25, 'cm'), legend.key.width = unit(0.25, 'cm'), legend.text = element_text((size=0.25))) + 
  labs(fill = "Tumour family") +
  theme(axis.text.x = element_text(size = 10, vjust = 1, hjust=1, angle=45)) +
  scale_fill_manual(values = family.cols) +
  ggtitle("Levels of Oncogene Induced Senescence by Tumour Location") +
  theme(plot.title = element_text(size = 10, hjust = 0.5)) +
  xlab("Tumour Location") + ylab ("Oncogene-Induced Senescence") +
  theme(axis.title.x = element_text(size = 10)) +
  theme(axis.title.y = element_text(size = 10)) +
print(onc_senes_location)
ggsave(onc_senes_location, file = "./onc_senes_location.png", width =  20, height = 10, units = "cm")

cor(pan.pheno$Tumour_Type, pan.pheno$Estimated.tumour.purity.according.to.TCGA...Ceccarelli.et.al..2016)

gene.list <- lapply(gene.list, remove.nas)

library(gridExtra)
ggarrange(cibersort_onc.plot, cibersort_near.plot, cibersort_fibro.plot) -> a

ggsave(a, file = "./test.png", width =  30, height = 20, units = "cm")
## calculating mean of medians

library(tidyverse)
medians.onc <- combined.df %>%
  group_by(Tumour_Type) %>%
  summarise(median = median(Oncogene_Induced_Senescent),
            sd = sd(Oncogene_Induced_Senescent),
            count = n())

medians.senes <- combined.df %>%
  group_by(Tumour_Type) %>%
  summarise(median = median(Senescent_BJ_fibroblast_cells),
            count = n())

medians.near <- combined.df %>%
  group_by(Tumour_Type) %>%
  summarise(median = median(Near_Senescent_BJ_fibroblast_cells),
            count = n())

medians.onc.grade <- combined.df.subset %>%
  group_by(grade) %>%
  summarise(median = median(Oncogene_Induced_Senescent),
            count = n())

medians.senes.grade <- combined.df.subset %>%
  group_by(grade) %>%
  summarise(median = median(Senescent_BJ_fibroblast_cells),
            count = n())

medians.near.grade <- combined.df.subset %>%
  group_by(grade) %>%
  summarise(median = median(Near_Senescent_BJ_fibroblast_cells),
            count = n())

medians.onc.age <- combined.df.age.subset %>%
  group_by(age) %>%
  summarise(median = median(Oncogene_Induced_Senescent),
            count = n())

medians.senes.age <- combined.df.age.subset %>%
  group_by(age) %>%
  summarise(median = median(Senescent_BJ_fibroblast_cells),
            count = n())

medians.near.age <- combined.df.age.subset %>%
  group_by(age) %>%
  summarise(median = median(Near_Senescent_BJ_fibroblast_cells),
            count = n())

medians.onc.age.group <- combined.df.age.test %>%
  group_by(age_group) %>%
  summarise(median = median(Oncogene_Induced_Senescent),
            count = n())

medians.senes.age.group <- combined.df.age.test %>%
  group_by(age_group) %>%
  summarise(median = median(Senescent_BJ_fibroblast_cells),
            count = n())

medians.near.age.group <- combined.df.age.test %>%
  group_by(age_group) %>%
  summarise(median = median(Near_Senescent_BJ_fibroblast_cells),
            count = n())

## means

averages.onc <- combined.df %>%
  group_by(Tumour_Type) %>%
  summarise(mean = mean(Oncogene_Induced_Senescent),
            median = median(Oncogene_Induced_Senescent),
            variance = var(Oncogene_Induced_Senescent),
            sd = sd(Oncogene_Induced_Senescent),
            count = n())

averages.senes <- combined.df %>%
  group_by(Tumour_Type) %>%
  summarise(mean = mean(Senescent_BJ_fibroblast_cells),
            median = median(Senescent_BJ_fibroblast_cells),
            variance = var(Senescent_BJ_fibroblast_cells),
            sd = sd(Senescent_BJ_fibroblast_cells),
            count = n())

averages.near <- combined.df %>%
  group_by(Tumour_Type) %>%
  summarise(mean = mean(Near_Senescent_BJ_fibroblast_cells),
            median = median(Near_Senescent_BJ_fibroblast_cells),
            variance = var(Near_Senescent_BJ_fibroblast_cells),
            sd = sd(Near_Senescent_BJ_fibroblast_cells),
            count = n())

## ANOVA tests and post-hoc

one.way.onc <- aov(Oncogene_Induced_Senescent ~ Tumour_Type, data = combined_df_sans_ctrl)
summary(one.way.onc)

one.way.senes <- aov(Senescent_BJ_fibroblast_cells ~ Tumour_Type, data = combined_df_sans_ctrl)
summary(one.way.senes)

one.way.near <- aov(Near_Senescent_BJ_fibroblast_cells ~ Tumour_Type, data = combined_df_sans_ctrl)
summary(one.way.near)

## my attempt to generate a boxplot from the ANOVA results as per https://statdoe.com/one-way-anova-and-box-plot-in-r/



Tukey.onc <- TukeyHSD(one.way.onc)

cld <- multcompView::multcompLetters4(one.way.onc, Tukey.onc)
print(cld)

Tk <- group_by(combined_df_sans_ctrl, Tumour_Type) %>%
  summarise(mean=mean(Oncogene_Induced_Senescent), quant = quantile(Oncogene_Induced_Senescent, probs = 0.75)) %>%
  arrange(desc(mean))

cld.onc <- as.data.frame.list(cld$Tumour_Type)
Tk$cld.onc <- cld.onc$Letters

print(Tk)

## this is a way to filter out the pair-wise comparisons that you are looking for

Tukey.onc$Tumour_Type[grepl("MB_G3",rownames(Tukey.onc$Tumour_Type))&grepl("CPH_PAP",rownames(Tukey.onc$Tumour_Type)),]

plot(Tukey.onc, las = 1, )

## end/ANOVA test

## Top and bottom

cibersort_onc.plot <-ggplot(combined.df, aes(x=Tumour_Type, y=Oncogene_Induced_Senescent, fill=family)) +
  geom_boxplot(outlier.color="black", outlier.size=0.1, outlier.alpha = 0.75) +
  theme(legend.position = "right", legend.key.size = unit(0.25, 'cm'), legend.key.height = unit(0.25, 'cm'), legend.key.width = unit(0.25, 'cm'), legend.text = element_text((size=0.25))) + 
  labs(fill = "Tumour family") +
  theme(axis.text.x = element_text(size = 5, angle = 90, vjust = 1, hjust=1)) +
  scale_fill_manual(values = family.cols) +
  ggtitle("Levels of Oncogene Induced Senescence by Tumour Type") +
  theme(plot.title = element_text(size = 10, hjust = 0.5)) +
  xlab("Tumour Type") + ylab ("Oncogene-Induced Senescence") +
  theme(axis.title.x = element_text(size = 7)) +
  theme(axis.title.y = element_text(size = 7))

boxplot(Oncogene_Induced_Senescent ~ Tumour_Type, data = combined.df)
boxplot(Senescent_BJ_fibroblast_cells ~ Tumour_Type, data = combined.df)
boxplot(Near_Senescent_BJ_fibroblast_cells ~ Tumour_Type, data = combined.df)
          
Summary <- boxplot(Oncogene_Induced_Senescent ~ Tumour_Type, data = combined.df)$stats
colnames(Summary)<-c("CPH_ADM", "CPH_PAP", "PITAD_ACTH", "PITAD_FSH_LH", "PITAD_PRL","PITAD_STH_DNS_A", "PITAD_STH_DNS_B",
                     "PITAD_STH_SPA", "PITAD_TSH", "PITUI", "PLEX_AD", "PLEX_PED_A", "PLEX_PED_B", "PIN_T_PB_A", "PIN_T_PB_B",
                     "PIN_T_PPT", "PTPR_A", "PTPR_B", "SCHW", "SCHW_MEL", "CHORDM", "EFT_CIC", "EWS", "HMB", "MNG", 
                     "SFT_HMPC", "MELAN", "MELCYT", "CN", "DLGNT", "ENB_A", "ENB_B", "LGG_DIG_DIA", "LGG_DNT", "LGG_GG", 
                     "LGG_RGNT", "LIPN", "PGG_nC", "RETB", "ANA_PA", "CHGL", "HGNET_MN1", "IHG", "LGG_MYB", "LGG_PA_GG_ST",
                     "LGG_PA_MID", "LGG_PA_PF", "LGG_SEGA", "PXA", "A_IDH", "A_IDH_HG", "O_IDH", "DMG_K27", "GBM_G34", "GBM_MES",
                     "GBM_MID", "GBM_MYCN", "GBM_RTK_I", "GBM_RTK_II", "GBM_RTK_III", "EPN_MPE", "EPN_PF_A", "EPN_PF_B",
                     "EPN_RELA", "EPN_SPINE", "EPN_YAP", "SUBEPN_PF", "SUBEPN_SPINE", "SUBEPN_ST", "ATRT_MYC", "ATRT_SHH", "ATRT_TYR",
                     "CNS_NB_FOXR2", "ETMR", "HGNET_BCOR", "MB_G3", "MB_G4", "MB_SHH_CHL_AD", "MB_SHH_INF", "MB_WNT", "CONTR_ADENOPIT",
                     "CONTR_CEBM", "CONTR_HEMI", "CONTR_HYPTHAL", "CONTR_INFLAM", "CONTR_PINEAL", "CONTR_PONS", "CONTR_REACT",
                     "CONTR_WM", "LYMPHO", "PLASMA")
rownames(Summary)<-c("Min","First Quartile","Median","Third Quartile","Maximum")

Summary_sen <- boxplot(Senescent_BJ_fibroblast_cells ~ Tumour_Type, data = combined.df)$stats
colnames(Summary_sen)<-c("CPH_ADM", "CPH_PAP", "PITAD_ACTH", "PITAD_FSH_LH", "PITAD_PRL","PITAD_STH_DNS_A", "PITAD_STH_DNS_B",
                     "PITAD_STH_SPA", "PITAD_TSH", "PITUI", "PLEX_AD", "PLEX_PED_A", "PLEX_PED_B", "PIN_T_PB_A", "PIN_T_PB_B",
                     "PIN_T_PPT", "PTPR_A", "PTPR_B", "SCHW", "SCHW_MEL", "CHORDM", "EFT_CIC", "EWS", "HMB", "MNG", 
                     "SFT_HMPC", "MELAN", "MELCYT", "CN", "DLGNT", "ENB_A", "ENB_B", "LGG_DIG_DIA", "LGG_DNT", "LGG_GG", 
                     "LGG_RGNT", "LIPN", "PGG_nC", "RETB", "ANA_PA", "CHGL", "HGNET_MN1", "IHG", "LGG_MYB", "LGG_PA_GG_ST",
                     "LGG_PA_MID", "LGG_PA_PF", "LGG_SEGA", "PXA", "A_IDH", "A_IDH_HG", "O_IDH", "DMG_K27", "GBM_G34", "GBM_MES",
                     "GBM_MID", "GBM_MYCN", "GBM_RTK_I", "GBM_RTK_II", "GBM_RTK_III", "EPN_MPE", "EPN_PF_A", "EPN_PF_B",
                     "EPN_RELA", "EPN_SPINE", "EPN_YAP", "SUBEPN_PF", "SUBEPN_SPINE", "SUBEPN_ST", "ATRT_MYC", "ATRT_SHH", "ATRT_TYR",
                     "CNS_NB_FOXR2", "ETMR", "HGNET_BCOR", "MB_G3", "MB_G4", "MB_SHH_CHL_AD", "MB_SHH_INF", "MB_WNT", "CONTR_ADENOPIT",
                     "CONTR_CEBM", "CONTR_HEMI", "CONTR_HYPTHAL", "CONTR_INFLAM", "CONTR_PINEAL", "CONTR_PONS", "CONTR_REACT",
                     "CONTR_WM", "LYMPHO", "PLASMA")
rownames(Summary_sen)<-c("Min","First Quartile","Median","Third Quartile","Maximum")

Summary_near <- boxplot(Senescent_BJ_fibroblast_cells ~ Tumour_Type, data = combined.df)$stats
colnames(Summary_near)<-c("CPH_ADM", "CPH_PAP", "PITAD_ACTH", "PITAD_FSH_LH", "PITAD_PRL","PITAD_STH_DNS_A", "PITAD_STH_DNS_B",
                         "PITAD_STH_SPA", "PITAD_TSH", "PITUI", "PLEX_AD", "PLEX_PED_A", "PLEX_PED_B", "PIN_T_PB_A", "PIN_T_PB_B",
                         "PIN_T_PPT", "PTPR_A", "PTPR_B", "SCHW", "SCHW_MEL", "CHORDM", "EFT_CIC", "EWS", "HMB", "MNG", 
                         "SFT_HMPC", "MELAN", "MELCYT", "CN", "DLGNT", "ENB_A", "ENB_B", "LGG_DIG_DIA", "LGG_DNT", "LGG_GG", 
                         "LGG_RGNT", "LIPN", "PGG_nC", "RETB", "ANA_PA", "CHGL", "HGNET_MN1", "IHG", "LGG_MYB", "LGG_PA_GG_ST",
                         "LGG_PA_MID", "LGG_PA_PF", "LGG_SEGA", "PXA", "A_IDH", "A_IDH_HG", "O_IDH", "DMG_K27", "GBM_G34", "GBM_MES",
                         "GBM_MID", "GBM_MYCN", "GBM_RTK_I", "GBM_RTK_II", "GBM_RTK_III", "EPN_MPE", "EPN_PF_A", "EPN_PF_B",
                         "EPN_RELA", "EPN_SPINE", "EPN_YAP", "SUBEPN_PF", "SUBEPN_SPINE", "SUBEPN_ST", "ATRT_MYC", "ATRT_SHH", "ATRT_TYR",
                         "CNS_NB_FOXR2", "ETMR", "HGNET_BCOR", "MB_G3", "MB_G4", "MB_SHH_CHL_AD", "MB_SHH_INF", "MB_WNT", "CONTR_ADENOPIT",
                         "CONTR_CEBM", "CONTR_HEMI", "CONTR_HYPTHAL", "CONTR_INFLAM", "CONTR_PINEAL", "CONTR_PONS", "CONTR_REACT",
                         "CONTR_WM", "LYMPHO", "PLASMA")
rownames(Summary_near)<-c("Min","First Quartile","Median","Third Quartile","Maximum")

Onc.mean <- aggregate(Oncogene_Induced_Senescent ~ Tumour_Type, combined.df, mean)
sen.mean <- aggregate(Senescent_BJ_fibroblast_cells ~ Tumour_Type, combined.df, mean)
near.mean <- aggregate(Near_Senescent_BJ_fibroblast_cells ~ Tumour_Type, combined.df, mean)

Top_bottom_OIS$Oncogene_Induced_Senescent

Top_bottom_OIS$OIS_order <- recode(Top_bottom_OIS$Tumour_Type, 
                                        "PITAD_STH_DNS_B" = 1, 
                                        "CONTR_PONS" = 2,
                                        "CPH_PAP" = 3,
                                        "SCHW_MEL" = 4,
                                        "LGG_DIG_DIA" = 5,
                                        "MB_SHH_INF" = 6,
                                        "MB_G3" = 7,
                                        "MB_G4" = 8,
                                        "MB_SHH_CHL_AD" = 9,
                                        "RETB" = 10)

Top_bottom_OIS %>%
  arrange(OIS_order) %>%    # First sort by val. This sort the dataframe but NOT the factor levels
  mutate(Tumour_Type=factor(Tumour_Type, levels=unique(Tumour_Type))) -> Top_bottom_OIS

Top_bottom_onc <-ggplot(Top_bottom_OIS, aes(x=Tumour_Type, y=Oncogene_Induced_Senescent, fill = family)) +
  geom_boxplot(outlier.color="black", outlier.size=0.1, outlier.alpha = 0.75) +
  theme(legend.position = "right", legend.key.size = unit(0.25, 'cm'), legend.key.height = unit(0.25, 'cm'), legend.key.width = unit(0.25, 'cm'), legend.text = element_text((size=0.25))) + 
  labs(fill = "Family") +
  theme(axis.text.x = element_text(size = 8, angle = 45, vjust = 1, hjust = 1)) +
  scale_fill_manual(values = family.cols) +
  ggtitle("Top and Bottom 5 Mean Levels of Oncogene Induced Senescence") +
  theme(plot.title = element_text(size = 10, hjust = 0.5)) +
  xlab("Tumour Type") + ylab ("Oncogene Induced Senescence") +
  theme(axis.title.x = element_text(size = 7)) +
  theme(axis.title.y = element_text(size = 7))
print(Top_bottom_onc)
ggsave(Top_bottom_onc, file = "./top_bottom_onc.png", width =  20, height = 10, units = "cm")

Top_bottom_senes %>%
  arrange(Senes_order) %>%    # First sort by val. This sort the dataframe but NOT the factor levels Top and Bottom 5 Mean Levels of Senescence Senescent_BJ_fibroblast_cells
  mutate(Tumour_Type=factor(Tumour_Type, levels=unique(Tumour_Type))) -> Top_bottom_senes

Top_bottom_senescent <-ggplot(Top_bottom_senes, aes(x=Tumour_Type, y=Senescent_BJ_fibroblast_cells, fill = family)) +
  geom_boxplot(outlier.color="black", outlier.size=0.1, outlier.alpha = 0.75) +
  theme(legend.position = "right", legend.key.size = unit(0.25, 'cm'), legend.key.height = unit(0.25, 'cm'), legend.key.width = unit(0.25, 'cm'), legend.text = element_text((size=0.25))) + 
  labs(fill = "Family") +
  theme(axis.text.x = element_text(size = 8, angle = 45, vjust = 1, hjust = 1)) +
  scale_fill_manual(values = family.cols) +
  ggtitle("Top and Bottom 5 Mean Levels of Senescence") +
  theme(plot.title = element_text(size = 10, hjust = 0.5)) +
  xlab("Tumour Type") + ylab ("Senescent BJ fibroblast cells") +
  theme(axis.title.x = element_text(size = 7)) +
  theme(axis.title.y = element_text(size = 7))
print(Top_bottom_senescent)
ggsave(Top_bottom_senescent, file = "./top_bottom_senescent.png", width =  20, height = 10, units = "cm")

Top_bottom_near %>%
  arrange(Near_Senes_order) %>%    # First sort by val. This sort the dataframe but NOT the factor levels
  mutate(Tumour_Type=factor(Tumour_Type, levels=unique(Tumour_Type))) -> Top_bottom_near

Top_bottom_near_senescent <-ggplot(Top_bottom_near, aes(x=Tumour_Type, y=Near_Senescent_BJ_fibroblast_cells, fill = family)) +
  geom_boxplot(outlier.color="black", outlier.size=0.1, outlier.alpha = 0.75) +
  theme(legend.position = "right", legend.key.size = unit(0.25, 'cm'), legend.key.height = unit(0.25, 'cm'), legend.key.width = unit(0.25, 'cm'), legend.text = element_text((size=0.25))) + 
  labs(fill = "Family") +
  theme(axis.text.x = element_text(size = 8, angle = 45, vjust = 1, hjust = 1)) +
  scale_fill_manual(values = family.cols) +
  ggtitle("Top and Bottom 5 Mean Levels of Near-Senescence") +
  theme(plot.title = element_text(size = 10, hjust = 0.5)) +
  xlab("Tumour Type") + ylab ("Near_Senescent_BJ_fibroblast_cells") +
  theme(axis.title.x = element_text(size = 7)) +
  theme(axis.title.y = element_text(size = 7))
print(Top_bottom_near_senescent)
ggsave(Top_bottom_near_senescent, file = "./top_bottom_near_senescent.png", width =  20, height = 10, units = "cm")

## Kruskal-Wallis & Wilcox tests grade

kruskal.test(Oncogene_Induced_Senescent ~ grade, data = combined.df.subset)

kruskal.test(Senescent_BJ_fibroblast_cells ~ grade, data = combined.df.subset)

kruskal.test(Near_Senescent_BJ_fibroblast_cells ~ grade, data = combined.df.subset)

pairwise.wilcox.test(combined.df.subset$Oncogene_Induced_Senescent, combined.df.subset$grade,
                     p.adjust.method = "BH")

pairwise.wilcox.test(combined.df.subset$Senescent_BJ_fibroblast_cells, combined.df.subset$grade,
                     p.adjust.method = "BH")

pairwise.wilcox.test(combined.df.subset$Near_Senescent_BJ_fibroblast_cells, combined.df.subset$grade,
                     p.adjust.method = "BH")

## Kruskal-Wallis & Wilcox tests age

kruskal.test(Oncogene_Induced_Senescent ~ age_group, data = combined.df.age.test)

kruskal.test(Senescent_BJ_fibroblast_cells ~ age_group, data = combined.df.age.test)

kruskal.test(Near_Senescent_BJ_fibroblast_cells ~ age_group, data = combined.df.age.test)

pairwise.wilcox.test(combined.df.age.test$Oncogene_Induced_Senescent, combined.df.age.test$age_group,
                     p.adjust.method = "BH")

pairwise.wilcox.test(combined.df.age.test$Senescent_BJ_fibroblast_cells, combined.df.age.test$age_group,
                     p.adjust.method = "BH")

pairwise.wilcox.test(combined.df.age.test$Near_Senescent_BJ_fibroblast_cells, combined.df.age.test$age_group,
                     p.adjust.method = "BH")

## end/Kruskal-Wallis & Wilcox test

##### script to generate a Venn diagram
Sakaki <- paste(GeneListdoc$`Sakaki-miRNA expression`)
SenMayo <- paste(GeneListdoc$SenMayo)
Chatsirisupachai <- paste(GeneListdoc$`Chatsirisupachai et al - list of senescence genes (overexpressed)`)
Avelar <- paste(GeneListdoc$`Avelar CellAge signatures`)
CellAge <- paste (GeneListdoc$`CellAge gene list`)
PengIMR90 <- paste (GeneListdoc$`Peng Xu et al: SASP factors induced in senescent IMR-90 cells`)
PengCDKN1A <- paste (GeneListdoc$`Peng Xu: SASP factors with induction dependent on CDKN1A`)
Casella <- paste(GeneListdoc$`Casella et al upregulated transcripts`)
Purcell <- paste(GeneListdoc$`Purcell et al`)
Coppe <- paste(GeneListdoc$`Coppé et al`)
Basisty <- paste(GeneListdoc$`Basisty et al SASP Atlas`)
#############

gene.list <- list(
  Sakaki, 
  SenMayo, 
  Chatsirisupachai, 
  Avelar, 
  CellAge, 
  PengIMR90, 
  PengCDKN1A, 
  Casella, 
  Purcell, 
  Coppe, 
  Basisty)

remove.nas <- function(x){
  if(length(which(x=="NA"))>0){
  x[-which(x=="NA")] -> x
  }
  return(x)
}

gene.list <- lapply(gene.list, remove.nas)

gene.list.names <- c("Sakaki" , 
  "SenMayo" , 
  "Chatsirisupachai" , 
  "Avelar" , 
  "CellAge" , 
  "PengIMR90" , 
  "PengCDKN1A" , 
  "Casella", 
  "Purcell" , 
  "Coppe" , 
  "Basisty")

names(gene.list) <- gene.list.names

library(VennDiagram)

#VennDiagram::venn.diagram(x , GeneListdoc = "venn1.png")

VennDiagram::venn.diagram(
  x = gene.list[c("Chatsirisupachai","Avelar")],
  category.names = c("Chatsirisupachai","Avelar"),
  filename = 'venn1.png', 
  output = TRUE,
  imagetype = "png",
  height = 800,
  width = 800,
  resolution = 300,
  fill = c("cadetblue3", "burlywood1"),
  fontfamily = "sans",
  cat.cex = 0.7,
  cat.pos = c(-10, 20),
  cat.dis = c(0.08, 0.03),
  cat.fontfamily = "sans",
  disable.logging = T)

VennDiagram::venn.diagram(
  x = gene.list[c("SenMayo","Basisty")],
  category.names = c("SenMayo","Basisty"),
  filename = 'venn2.png', 
  imagetype = "png", 
  cex = 1.5,
  height = 800,
  width = 800,
  resolution = 300,
  fill = c("cadetblue3", "burlywood1"),
  fontfamily = "sans",
  cat.cex = 0.7,
  cat.pos = c(-40, 20),
  cat.dis = c(0.08, 0.07),
  cat.fontfamily = "sans",
  disable.logging = T)

VennDiagram::venn.diagram(
  x = gene.list[c("PengIMR90","PengCDKN1A")],
  category.names = c("PengIMR90","PengCDKN1A"),
  filename = 'venn3.png', 
  imagetype = "png",
  cex = 1.5,
  height = 800,
  width = 800,
  resolution = 300,
  fill = c("cadetblue3", "burlywood1"),
  fontfamily = "sans",
  cat.cex = 0.7,
  cat.pos = c(-30, 20),
  cat.dis = c(0.08, 0.03),
  cat.fontfamily = "sans",
  disable.logging = T)

###
VennDiagram::calculate.overlap(gene.list[1:5]) -> out

library("UpSetR")
library("ComplexHeatmap")
library("pheatmap")

gene.freq <- list_to_matrix(gene.list)
# change the order of the rows on the heatmap
gene.freq <- gene.freq[order(rowSums(gene.freq), decreasing = T),]

rowSums(gene.freq)

# if you want to output as a png change pdf to png
# PDF opens a connection to the a file to output your graphs to
save_pheatmap_png <- function(x, filename, width=1600, height=900, res = 150) {
  png(filename, width = width, height = height, res = res)
  grid::grid.newpage()
  grid::grid.draw(x$gtable)
  dev.off()}
png(file = "./temp.png", height = 10, width = 10, units = "cm")
pheatmap(gene.freq[1:80,], fontsize_row = 8, fontsize_col = 5, cluster_rows = F, 
         labels_col = paste(colnames(gene.freq), "N =", c(27,125,525,1257,278,36,59,50,48,119,12)))

save_pheatmap_png()
# dev.off() disconnects you need to do this before opening the pdf file
dev.off()
# reseets the connections
graphics.off()

library(foreach)

matrix.of.overlaps <- foreach(i = 1:length(gene.list), .combine = rbind)%do%{
  foreach(z = 1:length(gene.list), .combine = c)%do%{
  length(intersect(gene.list[[i]], gene.list[[z]]))
  }
}

matrix.of.overlaps <- foreach(i = 1:length(gene.list), .combine = rbind)%do%{
  matrix.of.overlaps[i,] -> temp
  temp[i] <- NA
  return(temp)
}

colnames(matrix.of.overlaps) <- names(gene.list)
rownames(matrix.of.overlaps) <- names(gene.list)


unlist(lapply(gene.list, length)) -> set.lengths
normalised.matrix.of.overlaps <- apply(matrix.of.overlaps, 1, function(x){return(x/set.lengths)})

### two objects created one with a litst of the number of shared genes
matrix.of.overlaps
### same object but normalised to the overall size of the geneset
normalised.matrix.of.overlaps


pheatmap(matrix.of.overlaps, cluster_rows = F, cluster_cols = F)
pheatmap(matrix.of.overlaps, cluster_rows = F, cluster_cols = F, display_numbers = T, 
         labels_col = paste(colnames(matrix.of.overlaps), "N =", c(27,125,525,1257,278,36,59,50,48,119,12)),
         labels_row = paste(rownames(matrix.of.overlaps), "N =", c(27,125,525,1257,278,36,59,50,48,119,12)))
pheatmap(normalised.matrix.of.overlaps, cluster_rows = F, cluster_cols = F, display_numbers = T, labels_col = paste(colnames(gene.freq), "N =", c(27,125,525,1257,278,36,59,50,48,119,12)))

###################

one.way <- aov(Oncogene_Induced_Senescent ~ Tumour_Type, data = PanPhenoResults)
summary (one.way)

library(pheatmap)
pheatmap(output.test$SignatureMatrix)

## Time difference of 10.40594 mins

## the above is not a real world example however we provide here the full signature generated and used in our study and we typically run something like this...
# results <-CIBERSORT(sig_matrix = "./OPT2_0.2_200_SigEdit.txt", ## the signature from our study
#                    mixture_file = "a_mixture_file_from_CNS_tumours.txt", ## i.e. make your own beta matrix
#                    perm = 1000,
#                    QN = F,
#                    absolute = F,
#                    abs_method = 'sig.score')


#### your home drive is always /home/katiej
### this is sometimes represented as "~/"

### ./ = working directory you can see what this is by typing getwd()

if (!require("BiocManager", quietly = TRUE))
  install.packages("BiocManager")

BiocManager::install("FlowSorted.Blood.450k")

if (!require("BiocManager", quietly = TRUE))
  install.packages("BiocManager")

BiocManager::install("IlluminaHumanMethylation450kmanifest")

if (!require("BiocManager", quietly = TRUE))
  install.packages("BiocManager")

BiocManager::install("minfiData")

library(MethylCIBERSORT)

source('/home/katiej/methylcibersort_test/feature_select_WORKING_2019.R')
source('/home/katiej/methylcibersort_test/synth_mix_2019.R')

require(FlowSorted.Blood.450k)
require(IlluminaHumanMethylation450kmanifest)


#### at the moment you are drawing the Tumour_Type which is the main tumour type without taking into account subgroups
### the two pieces of information you need are found in the fields pan.pheno$Tumour_Type and pan.pheno$Tumour_Subgroup
### For convenience another column has been added called pan.pheno$Reference.Group.abbreviation which combines the two.
### It is probably this one that you should use for your boxplots and these categories should match nicely to the
### tumour families outlined in Grabovska et al
